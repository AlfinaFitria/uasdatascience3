# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13rkE-sSkRl46j0laYibHKAtOJQz1-m6g
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
import joblib

# Load pre-trained model and scaler
# Simpan model dan scaler ke file terlebih dahulu sebelum digunakan di sini:
# joblib.dump(best_model, "best_model.pkl")
# joblib.dump(scaler, "scaler.pkl")

model = joblib.load("wine_model.pkl")
scaler = joblib.load("wine_scaler.pkl")

# Streamlit app
st.title("Wine Quality Prediction App")
st.write("Masukkan fitur untuk memprediksi kualitas wine (low, medium, high).")

# Input form
with st.form("prediction_form"):
    fixed_acidity = st.number_input("Fixed Acidity", min_value=0.0, step=0.1, format="%.2f")
    volatile_acidity = st.number_input("Volatile Acidity", min_value=0.0, step=0.01, format="%.2f")
    citric_acid = st.number_input("Citric Acid", min_value=0.0, step=0.01, format="%.2f")
    residual_sugar = st.number_input("Residual Sugar", min_value=0.0, step=0.1, format="%.2f")
    chlorides = st.number_input("Chlorides", min_value=0.0, step=0.0001, format="%.4f")
    free_sulfur_dioxide = st.number_input("Free Sulfur Dioxide", min_value=0.0, step=0.1, format="%.2f")
    total_sulfur_dioxide = st.number_input("Total Sulfur Dioxide", min_value=0.0, step=0.1, format="%.2f")
    density = st.number_input("Density", min_value=0.0, step=0.0001, format="%.4f")
    pH = st.number_input("pH", min_value=0.0, step=0.01, format="%.2f")
    sulphates = st.number_input("Sulphates", min_value=0.0, step=0.01, format="%.2f")
    alcohol = st.number_input("Alcohol", min_value=0.0, step=0.1, format="%.2f")

    # Submit button
    submitted = st.form_submit_button("Predict")

if submitted:
    # Collect input features
    features = np.array([[
        fixed_acidity, volatile_acidity, citric_acid, residual_sugar, chlorides,
        free_sulfur_dioxide, total_sulfur_dioxide, density, pH, sulphates, alcohol
    ]])

    # Scale features
    features_scaled = scaler.transform(features)

    # Make prediction
    prediction = model.predict(features_scaled)

    # Decode prediction
    quality_map = {0: "low", 1: "medium", 2: "high"}
    quality_label = quality_map[prediction[0]]

    # Display result
    st.subheader("Predicted Wine Quality")
    st.write(f"The predicted wine quality is: **{quality_label.capitalize()}**")